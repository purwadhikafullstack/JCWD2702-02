// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uid          String     @id @default(uuid())
  roleId       Int        @default(3)
  fullname     String
  email        String     @unique
  password     String?
  verify       UserVerify @default(UNVERIFY)
  google       isGoogle   @default(FALSE)
  userImageUrl String?

  role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User_Reset_Password     User_Reset_Password[]
  User_Email_Verification User_Email_Verification[]
  Orders                  Order[]
  Carts                   Carts[]

  @@map("users")
}

enum isGoogle {
  TRUE
  FALSE
}

enum UserVerify {
  UNVERIFY
  VERIFIED
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User User[]

  @@map("roles")
}

model User_Email_Verification {
  id       Int      @id @default(autoincrement())
  userId   String
  expireIn DateTime

  user User @relation(fields: [userId], references: [uid])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("user_email_verification")
}

model User_Reset_Password {
  id       Int      @id @default(autoincrement())
  userId   String
  expireIn DateTime

  user User @relation(fields: [userId], references: [uid])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("user_reset_password")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  categoryUrl String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  products Product[]

  @@map("categories")
}

model Product {
  id               Int    @id @default(autoincrement())
  name             String
  description      String @db.LongText()
  price            Int    @default(0)
  reservedQuantity Int    @default(0)
  categoryId       Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  ProductImages   Product_Images[]
  Categories      Category?        @relation(fields: [categoryId], references: [id])
  CartItems       Cart_Items[]
  WarehouseStocks WarehouseStock[]
  OrderItems      OrderItem[]
  Carts           Carts[]

  @@map("products")
}

model Product_Images {
  id         Int    @id @default(autoincrement())
  productUrl String
  productId  Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Product Product? @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model Carts {
  id        Int    @id @default(autoincrement())
  userId    String
  productId Int
  qty       Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User    User    @relation(fields: [userId], references: [uid])
  Product Product @relation(fields: [productId], references: [id])

  @@map("carts")
}

model Warehouse {
  id        Int              @id @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  stocks    WarehouseStock[]
  orders    Order[]
}

model WarehouseStock {
  id          Int       @id @default(autoincrement())
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  stock       Int
}

model Order {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [uid])
  userId      String
  address     String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId Int
  status      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  shippedAt DateTime?

  items   OrderItem[]
  payment Payment[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Payment {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  imagePath String
  createdAt DateTime @default(now())
}

model Cart_Items {
  id        Int  @id @default(autoincrement())
  cartId    Int?
  productId Int?
  qty       Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Product Product? @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}
